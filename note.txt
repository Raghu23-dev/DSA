Time Complexity
O(1) - Constant - Time taken remains constant regardless of input size - Accessing an element in an array by index          
O(logN) - Logarthmic - Time taken increases logarthmically as the input size grows. Operations are typically halved at each step. Time increases linearly as N goes up exponentially - Binary search in a sorted array
O(N) - Linear - Time taken increases proportionally to the size of the input. If N doubles, time taken doubles - Finding an item in an unsorted list 
O(NlogN) - Linearithmic - Time taken increases in a linearithmic manner, often seen in divide and conquer algorithms - Merge sort or quick sort
O(N^2) - Quadratic - Time taken increases quadratically as the input size grows. Each element needs to be compared to every other element (nested loops) - Bubble sort or selection sort
O(2^N) - Exponential - Time taken doubles with each addition to N, leading to rapidly growing execution times - Finding all subsets of a set
O(N!) - Factorial - Time taken increases factorially with each increase in input size, leading to extremely slow execution times - Solving the travelling salesman problem exhaustively.

Arrays:
1.Contains Duplicate Problem
2.Missing Number
3.Find all the missing number
4.Two Sum